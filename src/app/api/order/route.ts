import { NextRequest,NextResponse } from 'next/server';import { supabaseServer } from '@/lib/supabaseClient';
export async function POST(req:NextRequest){const {tableId,items,note}=await req.json(); if(!tableId||!Array.isArray(items)||items.length===0) return NextResponse.json({error:'Invalid payload'},{status:400}); const sb=supabaseServer(); const {data:rows,error}=await sb.from('menu_items').select('id,price_cents,is_available').in('id',items.map((i:any)=>i.menuItemId)); if(error) return NextResponse.json({error:error.message},{status:400}); const price=new Map((rows??[]).map((m:any)=>[m.id,m.price_cents])); const total=items.reduce((s:number,i:any)=>s+(price.get(i.menuItemId)*i.qty),0); const {data:order, error:ins}=await sb.from('orders').insert({table_id:tableId,total_cents:total,note}).select().single(); if(ins) return NextResponse.json({error:ins.message},{status:400}); await sb.from('order_items').insert(items.map((i:any)=>({order_id:order.id,menu_item_id:i.menuItemId,qty:i.qty,price_cents:price.get(i.menuItemId)}))); await sb.from('order_events').insert({order_id:order.id,event:'created'}); return NextResponse.json({orderId:order.id,total_cents:total})}
